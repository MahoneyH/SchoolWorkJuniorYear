
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.util.*;
import javax.swing.JFileChooser;

public class PurpleGUI extends javax.swing.JFrame {
    Purple instance = new Purple();

    /*creates an overall inventory list
    ArrayList<Media> inventory = new ArrayList<Media>();
    ArrayList<Media> cartList = new ArrayList<Media>();
    static ArrayList<String> promos = new ArrayList<String>();
    */
    
    //static double pricePerMedia = 4;
    
    
    public PurpleGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bigTextArea = new javax.swing.JTextArea();
        searchButton = new javax.swing.JButton();
        adminButton = new javax.swing.JButton();
        cartButton = new javax.swing.JButton();
        invButton = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();
        emptyButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        userButton = new javax.swing.JButton();
        userTextField = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        addCartButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bigTextArea.setColumns(20);
        bigTextArea.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        bigTextArea.setRows(5);
        jScrollPane1.setViewportView(bigTextArea);

        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        adminButton.setText("Admin Login");
        adminButton.setEnabled(false);
        adminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminButtonActionPerformed(evt);
            }
        });

        cartButton.setText("Show Cart");
        cartButton.setEnabled(false);
        cartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cartButtonActionPerformed(evt);
            }
        });

        invButton.setText("Show Inventory");
        invButton.setEnabled(false);
        invButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invButtonActionPerformed(evt);
            }
        });

        checkButton.setText("Checkout");
        checkButton.setEnabled(false);
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        emptyButton.setText("Remove From Cart");
        emptyButton.setEnabled(false);
        emptyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emptyButtonActionPerformed(evt);
            }
        });

        returnButton.setText("Return Item");
        returnButton.setEnabled(false);
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        sortButton.setText("Sort");
        sortButton.setEnabled(false);
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        userButton.setText("User Login");
        userButton.setEnabled(false);
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });

        userTextField.setEditable(false);
        userTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextFieldActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        addCartButton.setText("Add to Cart");
        addCartButton.setEnabled(false);
        addCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCartButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Courier", 1, 90)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PurpleBox");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(addCartButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(invButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(emptyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(returnButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(userButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(adminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(userTextField)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addCartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(emptyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(5, 5, 5))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(checkButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(invButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        if (instance.cartList.isEmpty()) {
            JOptionPane.showMessageDialog(null, "There is nothing in your cart");
        }
        else {
            instance.checkOut();
        }
        
    }//GEN-LAST:event_checkButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        int choice;
        while (true) {
            try {
                choice = Integer.parseInt(JOptionPane.showInputDialog("Which would you like to search?\n" +
                                                 "1 By Name\n" +
                                                 "2 By Genre"));
            
                switch (choice) {
                    case 1:
                        instance.searchByName(instance.inventory);
                        break;
                    case 2:
                        instance.searchByGenre(instance.inventory);
                        break;
                    default:
                        throw new Exception();
                }
            }//end try
            catch(Exception e) {
                    JOptionPane.showMessageDialog(null, "Incorrect entry.");
            }
            break;
        }//end while
            
    }//GEN-LAST:event_searchButtonActionPerformed

    private void adminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminButtonActionPerformed
        String password = "";
        String allGood = "open";
        int choice;
        
        password = JOptionPane.showInputDialog("Enter your password");
        
        while (true) {
            choice = Integer.parseInt(JOptionPane.showInputDialog("Welcome Admin. What would you like to do?\n" +
                                        "What would you like to do?\n\n" +
                                        "Enter 1 to add a new game.\n" +
                                        "Enter 2 to add a new movie.\n" +
                                        "Enter 3 to remove a media item.\n" +
                                        "Enter 4 to change prices.\n" +
                                        "Enter 5 to Enable/Disable PurpleBox.\n" +
                                        "Enter 0 to exit."));
                    
            if(choice == 1 || choice ==2 || choice == 3 || choice == 4 || choice == 5 || choice == 0) {
                break;
            }
            else {
                JOptionPane.showMessageDialog(null, "Invalid Entry");
            }
        }
        switch (choice) {
            case 1:
               int num = instance.inventory.size() + 2;
               int type = 2;
               String name = JOptionPane.showInputDialog("What is the name of the title?");
               String desc = JOptionPane.showInputDialog("Please enter a description of the item.");
               String gen = JOptionPane.showInputDialog("Enter the genre.");
               String year = JOptionPane.showInputDialog("Enter the release year");
               double score;
               while(true) {
                   try {
                       score = Double.parseDouble(JOptionPane.showInputDialog("What is the critic score out of 5?"));
                       break;
                   }
                   catch(Exception e) {
                       JOptionPane.showMessageDialog(null, "Incorrect entry");
                   }
               }
               boolean aval = true;
               double price = 4;
               String plat = JOptionPane.showInputDialog("Is this for ps4 or xbox?");
               String rate = JOptionPane.showInputDialog("What is the rating?");
               Game tempGame = new Game(num, type, name, desc, gen, year, score, aval, price, plat, rate);
               instance.addInventory(instance.inventory,tempGame);
               break;
            case 2:
               int num2 = instance.inventory.size() + 2;
               int type2 = 1;
               String name2 = JOptionPane.showInputDialog("What is the name of the title?");
               String desc2 = JOptionPane.showInputDialog("Please enter a description of the item.");
               String gen2 = JOptionPane.showInputDialog("Enter the genre.");
               String year2 = JOptionPane.showInputDialog("Enter the release year");
               double score2;
               while(true) {
                   try {
                       score2 = Double.parseDouble(JOptionPane.showInputDialog("What is the critic score out of 5?"));
                       break;
                   }
                   catch(Exception e) {
                       JOptionPane.showMessageDialog(null, "Incorrect entry");
                   }
               }
               boolean aval2 = true;
               double price2 = 4;
               String plat2 = JOptionPane.showInputDialog("Is this dvd or blyray?");
               String rate2 = JOptionPane.showInputDialog("What is the rating?");
               Movie tempMovie = new Movie(num2, type2, name2, desc2, gen2, year2, score2, aval2, price2, plat2, rate2);
               instance.addInventory(instance.inventory,tempMovie);
               break;
            case 3:
                int removeIndex;
                boolean flag = true;
                while (true) {
                    try {
                        removeIndex = Integer.parseInt(JOptionPane.showInputDialog("Enter the number of an item to remove. -1 to exit."));
                        if (removeIndex == -1 ) {
                            JOptionPane.showMessageDialog(null, "Goodbye");
                            break;
                        }
                        for (int i=0; i<instance.inventory.size(); i++ ) {
                            if (instance.inventory.get(i).getPrimeKey() == instance.inventory.get(removeIndex).getPrimeKey() ) {
                                instance.removeInventory(instance.inventory,i);
                                JOptionPane.showMessageDialog(null, "Item removed");
                                flag = false;
                                break;
                            }
                        }//end for
                    }//end try
                    catch(Exception e) {
                    }
                    if (flag) {
                        JOptionPane.showMessageDialog(null, "Item number not found."); 
                    }
                    }//end while
                    break;
            case 4:
                instance.changePrice(instance.inventory, 0, 0);
                break;
            case 5:
                String pick;
                while (true) {
                    pick = JOptionPane.showInputDialog("Enter 1 to enable PurpleBox or 2 to disable.");
                if (pick.compareTo("1")== 0 || pick.compareTo("2")== 0 ) {
                    if (pick.compareTo("1")== 0 ) {
                        instance.enable();
                        break;
                    }
                    if (pick.compareTo("2")== 0 ) {
                        instance.disable();
                        break;
                    }
                }
                else {
                    JOptionPane.showMessageDialog(null, "Invalid entry.");
                }
                }
                
                
            case 0:
                JOptionPane.showMessageDialog(null, "Goodbye");
                break;
            default:
                break;
        }//end switch
            
        

                
    }//GEN-LAST:event_adminButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        int choice;
        boolean close = true;
        while (close) {
            try {
                choice = Integer.parseInt(JOptionPane.showInputDialog("How would you like to sort?\n" +
                                                 "1 A to Z\n" +
                                                 "2 Z to A\n" +
                                                 "3 New to Old\n" +
                                                 "4 Old to New\n" +
                                                 "5 Movies Only\n" +
                                                 "6 Games Only\n"));
                    
                if(!(choice == 1 || choice ==2 || choice == 3 || choice ==4 || choice == 5 || choice == 6 || choice ==7)) {
                    throw new Exception();
                }
            
                switch (choice) {
                    case 1:
                        instance.sortByAlphabeticalAtoZ(instance.inventory);
                        close = false;
                        break;
                    case 2:
                        instance.sortByAlphabeticalZtoA(instance.inventory);
                        close = false;
                        break;
                    case 3:
                        instance.newToOld(instance.inventory);
                        close = false;
                        break;
                    case 4:
                        instance.oldToNew(instance.inventory);
                        close = false;
                        break;
                    case 5:
                        instance.sortMovie(instance.inventory);
                        close = false;
                        break;
                    case 6:
                        instance.sortGame(instance.inventory);
                        close = false;
                        break;
                    default:
                        break;
                }
            }//end try
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Incorrect entry.");
            }
        }//end while
            
    }//GEN-LAST:event_sortButtonActionPerformed

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userButtonActionPerformed
        String username = "";
        instance.cartList.clear();
        
        username = JOptionPane.showInputDialog("Welcome. Please enter your username.");
        userTextField.setText("Current User: " + username);
        
        
        searchButton.setEnabled(true);
        sortButton.setEnabled(true);
        userButton.setEnabled(true);
        returnButton.setEnabled(true);
        emptyButton.setEnabled(true);
        adminButton.setEnabled(true);
        cartButton.setEnabled(true);
        checkButton.setEnabled(true);
        invButton.setEnabled(true);
        addCartButton.setEnabled(true);
    }//GEN-LAST:event_userButtonActionPerformed

    private void userTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userTextFieldActionPerformed

    private void invButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invButtonActionPerformed
        bigTextArea.setText("Inventory\n");
        bigTextArea.append(Media.heading());
        
        for(int i=0; i<instance.inventory.size(); i++) {
            if ( instance.inventory.get(i).isAval() ) {
                bigTextArea.append(instance.inventory.get(i).toString() + "\n");
            }
        }
    
    }//GEN-LAST:event_invButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        userButton.setEnabled(true);
        adminButton.setEnabled(true);
        instance.inventory = instance.loadList();
    }//GEN-LAST:event_startButtonActionPerformed

    private void cartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cartButtonActionPerformed
        bigTextArea.setText("Your Cart\n");
        bigTextArea.append(Media.heading());
        
        if ( instance.cartList.isEmpty() ) {
            bigTextArea.setText("Your cart is empty.");
        }
        else {
            for (int i=0; i<instance.cartList.size(); i++ ) {
                bigTextArea.append(instance.cartList.get(i).toString() + "\n");
             }
        }
        
    }//GEN-LAST:event_cartButtonActionPerformed

    private void addCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCartButtonActionPerformed
        bigTextArea.setText("");
        instance.addToCart();
        
        for (int i=0; i<instance.cartList.size(); i++ ) {
            bigTextArea.append(instance.cartList.get(i).toString() + "\n");
        }
        
    }//GEN-LAST:event_addCartButtonActionPerformed

    private void emptyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emptyButtonActionPerformed
        bigTextArea.setText("Your Cart\n\n");
        int key;
        while (true) {
            key = Integer.parseInt( JOptionPane.showInputDialog("Enter the number of the item you wish to remove"));
                
            for (int i=0; i<instance.cartList.size(); i++ ) {
                if (instance.cartList.get(i).getPrimeKey() == key ) {
                    instance.inventory.get(i).setAval(true);
                    instance.cartList.remove(instance.cartList.get(i));
                }
            }
            break;
            
        }
        for (int i=0; i<instance.cartList.size(); i++ ) {
            bigTextArea.append(instance.cartList.get(i).toString() + "\n");
        }
    }//GEN-LAST:event_emptyButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        bigTextArea.setText("");
        int key;
        boolean flag = true;
        while (true) {
            try {
                key = Integer.parseInt( JOptionPane.showInputDialog("Enter the number of the item you wish to return. -1 to exit."));
                for (int i=0; i<instance.cartList.size(); i++ ) {
                    if (instance.cartList.get(i).getPrimeKey() == key ) {
                        JOptionPane.showMessageDialog(null, "Item was taken from cart");
                        instance.cartList.get(i).setAval(true);
                        instance.cartList.remove(instance.cartList.get(i));
                        flag = false;
                        break;
                    }
                }
                for (int i=0; i<instance.inventory.size(); i++ ) {
                    if (instance.inventory.get(i).getPrimeKey() == key ) {
                        instance.returnItem(instance.inventory.get(i));
                        JOptionPane.showMessageDialog(null, "Item Returned");
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    JOptionPane.showMessageDialog(null, "No item found.");
                }
                break;    
            }
            catch(Exception e) {
                JOptionPane.showMessageDialog(null, "Incorrect Entry.");
            }
            
            
        }
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurpleGUI().setVisible(true);
            }
        });
        
    
    
    
        
        
        
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton addCartButton;
    public static javax.swing.JButton adminButton;
    public static javax.swing.JTextArea bigTextArea;
    public static javax.swing.JButton cartButton;
    public static javax.swing.JButton checkButton;
    public static javax.swing.JButton emptyButton;
    public static javax.swing.JButton invButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JButton returnButton;
    public static javax.swing.JButton searchButton;
    public static javax.swing.JButton sortButton;
    public static javax.swing.JButton startButton;
    public static javax.swing.JButton userButton;
    public static javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables




/*

    //USER METHODS
    @Override
    public ArrayList<Media> loadList(){
        ArrayList<Media> inventory = new ArrayList<Media>();
        //add 2 promo codes
        promos.add("popcorn");
        promos.add("binge");
        //Load file
        while( true ){
            ArrayList<String> bigList = new ArrayList<>();
        
            String fileName = ("./src/DatabasePurpleBox.csv");//current folder
            
    
            //read the file
            try {
                BufferedReader reader = new BufferedReader(new FileReader(fileName));
            
                //for each line
                String thisLine = null;
                //for splitting out commas
                String[] lineArray;
            
                while (true) {
                    thisLine = reader.readLine();//reads line by line
                    if (thisLine == null ) {
                        break;
                        //breaks if empty or at the end
                    }
                    else {
                        lineArray = thisLine.split(",");//split commas put strings into array
                        for(int n = 0; n < lineArray.length; n++) {
                            if( !"".equals(lineArray[n])) {
                                bigList.add(lineArray[n]);
                            }
                        }
                    
                    }
                }
                //make a media array after seperated commas taken
                for(int m = 0; m < bigList.size() ; m+=11) {
                    int primeKey = Integer.parseInt(bigList.get(m + 0));
                    int type = Integer.parseInt(bigList.get(m + 1));
                    String name = (bigList.get(m + 2));
                    String desc = (bigList.get(m + 3));
                    String genre = (bigList.get(m + 4));
                    String releaseYear = (bigList.get(m + 5));
                    double criticScore = Double.parseDouble(bigList.get(m + 6));
                    boolean aval = Boolean.parseBoolean(bigList.get(m + 7));
                    double price = Double.parseDouble(bigList.get(m + 8));
                    String tempPlat = (bigList.get(m + 9));
                    String tempRate = (bigList.get(m + 10));
                        
                    if (type == 2) {
                        Game tempGame = new Game(primeKey, type, name, desc, genre, releaseYear,
                                                     criticScore, aval, price, tempPlat, tempRate);
                        inventory.add(tempGame);
                    }
                    else {
                        Movie tempMovie = new Movie(primeKey, type, name, desc, genre, releaseYear,
                                                     criticScore, aval, price, tempPlat, tempRate);
                        inventory.add(tempMovie);
                    }
                        
                }//end for
                
            }//end try
            catch (IOException e) {
            }
            break;
        }//end while
        
        return inventory;
        
    }//end loadlist
    @Override
    public void filter(ArrayList<Media> media ) {
        
    }
    @Override
    public void searchByName(ArrayList<Media> media ) {
        String name = JOptionPane.showInputDialog("Enter the name of the item.");
        bigTextArea.setText("Results\n");
        for (int i = 0; i<media.size(); i++ ) {
            if (media.get(i).isAval() && media.get(i).getName().toLowerCase().contains(name.toLowerCase()) ) {
                bigTextArea.append(media.get(i).toString() + "\n");
            }
        }
    }
    @Override
    public void searchByGenre(ArrayList<Media> media) {
        String name = JOptionPane.showInputDialog("Enter the genre.");
        bigTextArea.setText("Results\n");
        for (int i = 0; i<media.size(); i++ ) {
            if ( media.get(i).isAval() && media.get(i).getGenre().toLowerCase().contains(name.toLowerCase()) ) {
                bigTextArea.append(media.get(i).toString() + "\n");
            }
        }
    }
    @Override
    public void sortByScore(ArrayList<Media> media) {
        
    }
    @Override
    public void sortByAlphabeticalAtoZ(ArrayList<Media> media) {
        int minIndex;
        Media temp;
        bigTextArea.setText("");
        
        //sort
        for(int x=0; x < media.size(); x++) {
        
            minIndex = x; 

            for(int i=(x+1); i < media.size(); i++) {
                if(!(media.get(i).getName().compareTo(media.get(x).getName()) > 0)) {
                    minIndex = i;
                    temp = media.get(x);
                    media.set(x, media.get(minIndex));
                    media.set(minIndex, temp);
                }
            }
            
        }
        for(int p = 0; p< media.size(); p++ ) {
            if(media.get(p).isAval() ) {
                bigTextArea.append(media.get(p).toString() + "\n");
            }
        }
        
    }//end AtoZ
    
    @Override
    public void sortByAlphabeticalZtoA(ArrayList<Media> media) {
        int maxIndex;
        Media temp;
        bigTextArea.setText("");
        
        //sort
        for(int x=0; x < media.size(); x++) {
        
            maxIndex = x; 

            for(int i=(x+1); i < media.size(); i++) {
                if(media.get(i).getName().compareTo(media.get(x).getName()) > 0) {
                    maxIndex = i;
                    temp = media.get(x);
                    media.set(x, media.get(maxIndex));
                    media.set(maxIndex, temp);
                }
            }
            
        }
        for(int p = 0; p< media.size(); p++ ) {
            if(media.get(p).isAval() ) {
                bigTextArea.append(media.get(p).toString() + "\n");
            }
        }
        
    }//end ZtoA
        
    @Override
    public void oldToNew(ArrayList<Media> media) {
        int maxIndex;
        Media temp;
        bigTextArea.setText("");
        
        //sort
        for(int x=0; x < media.size(); x++) {
        
            maxIndex = x; 

            for(int i=(x+1); i < media.size(); i++) {
                if(!(media.get(i).getReleaseYear().compareTo(media.get(x).getReleaseYear() ) > 0)) {
                    maxIndex = i;
                    temp = media.get(x);
                    media.set(x, media.get(maxIndex));
                    media.set(maxIndex, temp);
                }
            }
            
        }
        for(int p = 0; p< media.size(); p++ ) {
            if(media.get(p).isAval() ) {
                bigTextArea.append(media.get(p).toString() + "\n");
            }
        }
        
    }//end oldtonew
    
    @Override
    public void newToOld(ArrayList<Media> media) {
        int minIndex;
        Media temp;
        bigTextArea.setText("");
        
        //sort
        for(int x=0; x < media.size(); x++) {
        
            minIndex = x; 

            for(int i=(x+1); i < media.size(); i++) {
                if(media.get(i).getReleaseYear().compareTo(media.get(x).getReleaseYear() ) > 0) {
                    minIndex = i;
                    temp = media.get(x);
                    media.set(x, media.get(minIndex));
                    media.set(minIndex, temp);
                }
            }
            
        }
        for(int p = 0; p< media.size(); p++ ) {
            if(media.get(p).isAval() ) {
                bigTextArea.append(media.get(p).toString() + "\n");
            }
        }
    }//end newtoold
    
    @Override
    public void special(ArrayList<Media> media) {
        
    }
    @Override
    public void searchByRating(ArrayList<Media> media) {
       
    }
    @Override
    public void sortMovie(ArrayList<Media> media) {
        bigTextArea.setText("");
        for(int i=0; i<media.size(); i++ ) {
            if (media.get(i).getType() == 1 && media.get(i).isAval()) {
                bigTextArea.append(media.get(i).toString() + "\n");
            }
        }
        
    }
    @Override
    public void sortGame(ArrayList<Media> media) {
        bigTextArea.setText("");
        for(int i=0; i<media.size(); i++ ) {
            if (media.get(i).getType() == 2 && media.get(i).isAval()) {
                bigTextArea.append(media.get(i).toString() + "\n");
            }
        }
        
    }
    @Override
    public Media addToCart() {
        int key;
        Media found = null;
        while (true) {
            key = Integer.parseInt( JOptionPane.showInputDialog("Enter the number of the item you wish to add to cart"));
            
            for (int i=0; i<inventory.size(); i++ ) {
                if (inventory.get(i).getPrimeKey() == key && inventory.get(i).isAval()) {
                    inventory.get(i).setAval(false);
                    cartList.add(inventory.get(i));
                    found = inventory.get(i);
                }
            }
            break;
            
        }
        return found;
        
    }
    @Override
    public void removeFromCart() {
        int key;
        while (true) {
            key = Integer.parseInt( JOptionPane.showInputDialog("Enter the number of the item you wish to remove"));
                
            for (int i=0; i<cartList.size(); i++ ) {
                if (cartList.get(i).getPrimeKey() == key ) {
                    cartList.remove(cartList.get(i));
                    inventory.get(i).setAval(true);
                }
            }
            break;
            
        }
        
    }
    @Override
    public void emptyCart() {
        bigTextArea.setText("Cart Empty");
        for (int i = 0; i<cartList.size(); i++ ) {
            cartList.get(i).setAval(true);
        }
        cartList.clear();
        
        
        
    }
    @Override
    public void returnItem(Media item) {
        item.setAval(true);
        
    }
    @Override
    public void checkOut() {
        String codeEntered = "";
        boolean foundCode = false;
        double total = cartList.get(0).getPrice() * cartList.size();
        String cardNum = "";    
        boolean flag = true;
        
        codeEntered = JOptionPane.showInputDialog("Enter promo code or press ok");
        while (flag) {
            for (int i=0; i<promos.size(); i++ ) {
                if (promos.get(i).compareTo(codeEntered) == 0 ) {
                    foundCode = true;
                    flag = false;
                }
            }
            if (foundCode == false ) {
                JOptionPane.showMessageDialog(null, "Code not found");
                flag = false;
            }
        }
        if (foundCode) {
            total = total / 2;
        }
        
        JOptionPane.showMessageDialog(null, String.format("The total is $%.2f", total));
        cardNum = JOptionPane.showInputDialog("Please enter your credit card number");
        while(cardNum.length() < 19) {
            JOptionPane.showMessageDialog(null, "Invalid entry. Card number is 19 digits.");
            cardNum = JOptionPane.showInputDialog("Enter card number.");
        }
        JOptionPane.showMessageDialog(null, "Thank you for your purchase!");
        email();
        cartList.clear();
        bigTextArea.setText("Cart Empty");
        
    }
    @Override
    public void applyCode(String code) {
        
    }
    @Override
    public void callAdminScreen() {
        
    }
    @Override
    public void email() {
        JOptionPane.showInputDialog("Enter your email for future promotions or press ok");
        JOptionPane.showMessageDialog(null, "Thanks for choosing PurpleBox");
        
    }
    //Admin Methods----------------------------------------------------------------
    @Override
    public void addInventory(ArrayList<Media> inventory, Media item) {
        inventory.add(item);
    }
    @Override
    public void removeInventory(ArrayList<Media> inventory, int index) {
        inventory.get(index).setAval(false);
    }
    @Override
    public void changePrice(ArrayList<Media> inventory, int index, double price) {
        
        while (true) {
            double newPrice;
            try {
                newPrice = Double.parseDouble(JOptionPane.showInputDialog("Enter the new price for items."));
                for (int i=0; i<inventory.size(); i++ ) {
                    inventory.get(i).setPrice(newPrice);
                }
                JOptionPane.showMessageDialog(null, String.format("Price is now $%.2f", newPrice));
                break;
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid entry.");
            }
        }
        
        
    }
    @Override
    public void bulkDisco(ArrayList<Media> cart) {
        
    }
    @Override
    public boolean changePromoCodes(String code) {
        return true;
    }
    @Override
    public void enable() {
        searchButton.setEnabled(true);
        sortButton.setEnabled(true);
        userButton.setEnabled(true);
        returnButton.setEnabled(true);
        emptyButton.setEnabled(true);
        adminButton.setEnabled(true);
        cartButton.setEnabled(true);
        checkButton.setEnabled(true);
        invButton.setEnabled(true);
        addCartButton.setEnabled(true);
    }
    @Override
    public void disable() {
        searchButton.setEnabled(false);
        sortButton.setEnabled(false);
        userButton.setEnabled(false);
        returnButton.setEnabled(false);
        emptyButton.setEnabled(false);
        cartButton.setEnabled(false);
        checkButton.setEnabled(false);
        invButton.setEnabled(false);
        addCartButton.setEnabled(false);
    }

*/
}
